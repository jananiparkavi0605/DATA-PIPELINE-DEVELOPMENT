{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b9b2753a",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "from sklearn.preprocessing import StandardScaler, OneHotEncoder\n",
    "from sklearn.impute import SimpleImputer\n",
    "from sklearn.compose import ColumnTransformer\n",
    "from sklearn.pipeline import Pipeline\n",
    "import os\n",
    "\n",
    "# 1. EXTRACT\n",
    "def extract_data(file_path):\n",
    "    \"\"\"\n",
    "    Extracts data from a CSV file.\n",
    "    Args:\n",
    "        file_path (str): Path to the CSV file.\n",
    "    Returns:\n",
    "        DataFrame: Loaded data as a Pandas DataFrame.\n",
    "    \"\"\"\n",
    "    if os.path.exists(file_path):\n",
    "        data = pd.read_csv(file_path)\n",
    "        print(\"Data successfully loaded!\")\n",
    "        return data\n",
    "    else:\n",
    "        raise FileNotFoundError(f\"The file {file_path} does not exist.\")\n",
    "\n",
    "# 2. TRANSFORM\n",
    "def transform_data(data):\n",
    "    \"\"\"\n",
    "    Transforms data using preprocessing steps.\n",
    "    Args:\n",
    "        data (DataFrame): Input data.\n",
    "    Returns:\n",
    "        DataFrame: Transformed data.\n",
    "    \"\"\"\n",
    "    # Define features\n",
    "    numeric_features = data.select_dtypes(include=[\"int64\", \"float64\"]).columns\n",
    "    categorical_features = data.select_dtypes(include=[\"object\"]).columns\n",
    "\n",
    "    # Pipelines for numeric and categorical data\n",
    "    numeric_transformer = Pipeline(steps=[\n",
    "        ('imputer', SimpleImputer(strategy='mean')),  # Handle missing values\n",
    "        ('scaler', StandardScaler())  # Normalize data\n",
    "    ])\n",
    "\n",
    "    categorical_transformer = Pipeline(steps=[\n",
    "        ('imputer', SimpleImputer(strategy='most_frequent')),  # Handle missing values\n",
    "        ('onehot', OneHotEncoder(handle_unknown='ignore'))  # One-hot encode\n",
    "    ])\n",
    "\n",
    "    # Combine transformations\n",
    "    preprocessor = ColumnTransformer(\n",
    "        transformers=[\n",
    "            ('num', numeric_transformer, numeric_features),\n",
    "            ('cat', categorical_transformer, categorical_features)\n",
    "        ]\n",
    "    )\n",
    "\n",
    "    # Fit and transform data\n",
    "    transformed_data = preprocessor.fit_transform(data)\n",
    "    return transformed_data, preprocessor\n",
    "\n",
    "# 3. LOAD\n",
    "def load_data(transformed_data, output_path):\n",
    "    \"\"\"\n",
    "    Saves the transformed data to a CSV file.\n",
    "    Args:\n",
    "        transformed_data (array-like): Preprocessed data.\n",
    "        output_path (str): Path to save the output CSV file.\n",
    "    \"\"\"\n",
    "    pd.DataFrame(transformed_data).to_csv(output_path, index=False)\n",
    "    print(f\"Transformed data saved to {output_path}.\")\n",
    "\n",
    "# Main Function\n",
    "if __name__ == \"__main__\":\n",
    "    input_file = \"input_data.csv\"  # Specify your input CSV file\n",
    "    output_file = \"transformed_data.csv\"  # Specify your output file\n",
    "\n",
    "    # Step 1: Extract data\n",
    "    data = extract_data(input_file)\n",
    "\n",
    "    # Step 2: Transform data\n",
    "    transformed_data, preprocessor = transform_data(data)\n",
    "\n",
    "    # Step 3: Load data\n",
    "    load_data(transformed_data, output_file)\n",
    "\n",
    "    print(\"ETL pipeline completed successfully!\")\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
